#!/bin/bash
#  Bash script for easy control and access to Samba resources
#  https://github.com/martin-rizzo/ZZScripts
#  by Martin Rizzo
ScriptName="${0##*/}";ScriptVersion=0.1
Help="
Usage: $ScriptName COMMAND [resource]

Admin Commands:
    $ScriptName info  [host]
    $ScriptName fstab [host]
    $ScriptName secure

User Commands:
    $ScriptName list
    $ScriptName mount  <dir>
    $ScriptName umount <dir>

Options:
    -h, --help     display this help
    -V, --version  display script version

Examples:
    ....
"

# CONSTANTS (can be modified by the arguments passed to the script)
SambaUser=
SambaHost=
Disk=


function set_disk() {
    if [[ "$1" =~ ^[0-9]+$ || "$1" == /* ]]; then
      Disk="$1"
    else
      Disk="/$1"
    fi
}

function parse_samba_path() {
    local path=$1
    SambaUser=${path%@*}
    [[ "$SambaUser" == "$path" ]] && SambaUser=$USER
    Disk=${path#*/}
    [[ "$Disk" == "$path" ]] && Disk=""
    SambaHost=${path#$SambaUser@}
    SambaHost=${SambaHost%/$Disk}
}


function proc_samba_disks() {
    local smbuser="$1" smbhost="$2" funct="$3"
    local disklines name type comment

    echo    "Logging in to $smbuser@$smbhost"
    echo -n 'Password: '
    disklines=$(smbclient -L $smbhost -U $smbuser | grep -i 'Disk')
    echo

    $funct '#BEGIN'
    while read diskline; do
      diskline=$(echo $diskline)
      name="${diskline%% *}"; diskline="${diskline#* }"
      type="${diskline%% *}"; diskline="${diskline#* }"
      comment="$diskline"
      $funct '#ITEM' "$name" "$type" "$comment"
      if [[ $? != 0 ]]; then
        echo STOP!
        break
      fi
    done <<< "$disklines"
    $funct '#END'
}

## Reads the "/etc/fstab" file line by line, and calls the function
## specified as argument to process each line.
##
## @param func
##     The name of the function to process each line of /etc/fstab.
##     The function should accept the following parameters:
##         $1: A line count (starting at 1)
##         $1: The device name, eg.: //sambaserver/Disk
##         $2: The mount point, eg.: /home/user/ServerName/Disk
##         $3: The file system type, eg.: cifs
##         $4: The mount options separated by commas.
##
function proc_fstab() {
    local func="$1"
    local count=1 fs_type options
    while IFS= read -r line; do
      if [[ $line != \#* ]]; then
        fields=($line)
        fs_type=${fields[2]}
        options=${fields[3]}
        if [ "$fs_type" = cifs -a "$options" != "${options/,uid=$USER,/}" ]; then
          $func $count "${fields[0]}" "${fields[1]}" "$fs_type" "$options"
          if [[ $? != 0 ]]; then
            break
          fi
          ((count++))
        fi
      fi
    done < "/etc/fstab"
}

#------------------------------- INFO COMMAND -------------------------------#

function print_disk_info() {
    local cmd="$1" name="$2" type="$3" comment="$4"
    [ "$cmd" = '#BEGIN' ] && echo -e "\n  [$SambaUser@$SambaHost]"
    [ "$cmd" = '#ITEM'  ] && printf '     +- %-14.14s %s\n' "$name" "$comment"
    [ "$cmd" = '#END'   ] && echo
}

function cmd_info() {
    parse_samba_path "$1"
    proc_samba_disks "$SambaUser" "$SambaHost" print_disk_info
}

#------------------------------ FSTAB COMMAND -------------------------------#

function print_fstab_conf() {
    local cmd="$1" diskname="$2" disktype="$3" comment="$4"
    local hostdir group flg1 flg2

    if [ "$cmd" = '#BEGIN' ]; then
      echo
      echo 'These lines must be added to /etc/fstab to allow mounting:'
      echo
    fi
    if [ "$cmd" = '#ITEM' ]; then
      hostdir='Mendoserver'
      group=$(id -g -n)
      resour="//$SambaHost/$diskname"
      mountdir="/home/$USER/$hostdir/$diskname"
      flg1="user,noauto,rw,uid=$USER,gid=$group,file_mode=0640,dir_mode=0750"
      flg2="credentials=/home/$USER/$hostdir/credentials"
      printf '%-30s %-40s cifs %-24s 0 0\n' "$resour" "$mountdir" "$flg1,$flg2"
    fi
    if [ "$cmd" = '#END' ]; then
      echo
    fi
}

function cmd_fstab() {
    parse_samba_path "$1"
    proc_samba_disks "$SambaUser" "$SambaHost" print_fstab_conf
}

#------------------------------ SECURE COMMAND ------------------------------#

function get_safety() {
    local path=$(which $1)
    local perbits=$(stat -c '%A' "$path")
    local status=${perbits:3:1}
    echo "$path" "$status" "$perbits"
}

function print_safety() {
    local path="$1" status="$2" perbits="$3"
    local comment suid
    case $status in
      x)
        suid='NO' ; comment='[user mounts not supported]'
        ;;
      s)
        suid='YES' ; comment=''
        ;;
      *)
        suid='ERR'
        ;;
    esac
    printf '    %-10s   %-4s  %-22s %s\n' "$perbits" "$suid" "$path" "$comment"
}

function cmd_safety() {
    local mount_path     mount_st
    local umount_path    umount_st
    local mountcifs_path mountcifs_st
    echo

    echo '  Enabling SUID on mount allows non-privileged users to mount file systems,'
    echo '  but disabling it improves security by limiting execution of this command.'
    echo

    echo '  Current state of the SUID bit:'
    read mount_path mount_st perbits <<< $(get_safety mount)
    print_safety "$mount_path" "$mount_st" "$perbits"
    read umount_path umount_st perbits <<< $(get_safety umount)
    print_safety "$umount_path" "$umount_st" "$perbits"
    read mountcifs_path mountcifs_st perbits <<< $(get_safety mount.cifs)
    print_safety "$mountcifs_path" "$mountcifs_st" "$perbits"
    echo


    if [ "$mount_st" != s -o "$umount_st" != s -o "$mountcifs_st" != s ]; then
    echo '  To allow users mount samba resources, try enabling SUID bit:'
    [ "$mount_st"     != s ] && echo "    > sudo chmod u+s $mount_path"
    [ "$umount_st"    != s ] && echo "    > sudo chmod u+s $umount_path"
    [ "$mountcifs_st" != s ] && echo "    > sudo chmod u+s $mountcifs_path"
    echo
    fi

    if [ "$mountcifs_st" == s ]; then
    echo '  If you just want to improve security then disable SUID bit:'
    echo '    ## this disable mount of samba resources for non-privileged users'
    echo "    > sudo chmod u-s $mountcifs_path"
    echo
    fi
}

#------------------------------- LIST COMMAND -------------------------------#

function print_disk() {
    local count="$1" disk="$2" mount_point="$3" fs_type="$4" options="$5"

    if [ "$fs_type" = cifs -a "$options" != "${options/,uid=$USER,/}" ]; then
      IFS='/' read -ra path_array <<< "$mount_point"
      resource="${path_array[-2]}/${path_array[-1]}"
      printf '    %2d) %s\n' "$count" "$resource"
    fi
}

function cmd_list() {
    echo
    echo '  Available disks:'
    proc_fstab print_disk
    echo
    echo '  Disks can be mounted by its order number or its name:'
    echo "     > $ScriptName mount 1"
    echo "     > $ScriptName mount Album"
    echo "     > $ScriptName mount Mendoserver/Album"
    echo
}

#------------------------------- MOUNT COMMAND ------------------------------#

function mount_disk() {
    local count="$1" disk_name="$2" mount_point="$3" fs_type="$4" options="$5"
    local found
    if [[ $Disk = $count ]]; then
      found=YES
    else
      case "${mount_point,,}" in
        *"${Disk,,}")
          found=YES
          ;;
      esac
    fi
    if [[ $found ]]; then
      echo "Mounting $mount_point ..."
      mkdir -p "$mount_point"
      mount "$mount_point"
      return 1
    fi
}

function cmd_mount() {
    set_disk "$1"
    proc_fstab mount_disk
}

#------------------------------- UMOUNT COMMAND -----------------------------#

function umount_disk() {
    local count="$1" disk_name="$2" mount_point="$3" fs_type="$4" options="$5"
    local found
    if [[ $Disk = $count ]]; then
      found=YES
    else
      case "${mount_point,,}" in
        *"${Disk,,}")
          found=YES
          ;;
      esac
    fi
    if [[ $found ]]; then
      echo "Unmounting $mount_point ..."
      umount "$mount_point"
      rmdir "$mount_point"
      return 1
    fi
}

function cmd_umount() {
    set_disk "$1"
    proc_fstab umount_disk
}



#================================== START ==================================#

case "$1" in

  "info")
    cmd_info "$2"
    ;;
  "fstab")
    cmd_fstab "$2"
    ;;
  "secure")
    cmd_safety "$2"
    ;;
  "list")
    cmd_list "$2"
    ;;
  "mount")
    cmd_mount "$2"
    ;;
  "umount")
    cmd_umount "$2"
    ;;

esac

